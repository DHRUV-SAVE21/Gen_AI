<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Resume Builder — Data Pirates</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-50 min-h-screen p-6">
  <div class="max-w-5xl mx-auto">
    <h1 class="text-3xl font-bold mb-4">Resume Builder (AI-assisted)</h1>

    <div class="bg-white p-4 rounded shadow mb-4">
      <div class="flex gap-2">
        <button id="openPromptBtn" class="bg-indigo-600 text-white px-4 py-2 rounded">AI Prompt Generator</button>
        <button id="createBtn" class="bg-green-600 text-white px-4 py-2 rounded">Create Resume</button>
        <input id="targetSkills" placeholder="Target skills (comma separated)" class="ml-auto border p-2 rounded w-1/3"/>
      </div>

      <p class="text-sm text-gray-600 mt-2">Enter detailed info about you: skills, roles, projects, education, achievements. Or use the AI Prompt Generator to fill required fields quickly.</p>

      <textarea id="rawPrompt" rows="10" class="mt-3 w-full border rounded p-3" placeholder="Write: I am John Doe, 28, software engineer, skills: python, ml, django..."></textarea>
      <p id="status" class="text-sm text-gray-600 mt-2"></p>
    </div>

    <!-- Results & visualizations -->
    <div id="resultsPanel" class="hidden">
      <div class="grid md:grid-cols-3 gap-4 mb-4">
        <div class="bg-white p-4 rounded shadow">
          <h3 class="font-semibold mb-2">ATS Score</h3>
          <canvas id="atsChart" height="180"></canvas>
          <p id="atsText" class="mt-2 text-sm"></p>
        </div>

        <div class="bg-white p-4 rounded shadow">
          <h3 class="font-semibold mb-2">Experience Timeline</h3>
          <canvas id="timelineChart" height="180"></canvas>
        </div>

        <div class="bg-white p-4 rounded shadow">
          <h3 class="font-semibold mb-2">Top Keywords</h3>
          <canvas id="keywordsChart" height="180"></canvas>
        </div>
      </div>

      <div class="bg-white p-4 rounded shadow mb-4">
        <h3 class="font-semibold">Matched / Missing Skills</h3>
        <div id="skillChips" class="mt-2"></div>
      </div>

      <div class="bg-white p-4 rounded shadow">
        <h3 class="font-semibold">Generated Resume</h3>
        <pre id="resumeText" class="whitespace-pre-wrap"></pre>
        <div class="mt-3">
          <a id="downloadJson" class="text-indigo-600 underline mr-4" href="#" download>Download JSON</a>
          <a id="downloadTxt" class="text-indigo-600 underline" href="#" download>Download TXT</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Prompt modal -->
  <div id="promptModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
    <div class="bg-white rounded p-6 w-96">
      <h3 class="font-semibold mb-2">AI Prompt Generator</h3>
      <input id="pg_name" placeholder="Full name" class="w-full border p-2 rounded mb-2"/>
      <input id="pg_title" placeholder="Current title (e.g. Senior ML Engineer)" class="w-full border p-2 rounded mb-2"/>
      <input id="pg_contact" placeholder="Contact (email / phone)" class="w-full border p-2 rounded mb-2"/>
      <input id="pg_skills" placeholder="Skills (comma separated)" class="w-full border p-2 rounded mb-2"/>
      <input id="pg_companies" placeholder="Target companies (comma separated, optional)" class="w-full border p-2 rounded mb-2"/>
      <div class="flex justify-end gap-2">
        <button id="cancelPrompt" class="px-3 py-1">Cancel</button>
        <button id="insertPrompt" class="bg-indigo-600 text-white px-3 py-1 rounded">Insert Prompt</button>
      </div>
    </div>
  </div>

<script>
  // UI wiring
  const openPromptBtn = document.getElementById("openPromptBtn");
  const promptModal = document.getElementById("promptModal");
  const cancelPrompt = document.getElementById("cancelPrompt");
  const insertPrompt = document.getElementById("insertPrompt");

  openPromptBtn.addEventListener("click", () => {
    promptModal.classList.remove("hidden");
    promptModal.classList.add("flex");
  });
  cancelPrompt.addEventListener("click", () => {
    promptModal.classList.add("hidden");
  });

  insertPrompt.addEventListener("click", () => {
    const name = document.getElementById("pg_name").value.trim();
    const title = document.getElementById("pg_title").value.trim();
    const contact = document.getElementById("pg_contact").value.trim();
    const skills = document.getElementById("pg_skills").value.trim();
    const companies = document.getElementById("pg_companies").value.trim();

    // Build AI-friendly prompt
    let prompt = `Create a professional resume for ${name || "[NAME]"}, ${title ? ("Title: " + title + ". ") : ""}Contact: ${contact}. `;
    if (skills) prompt += `Key skills: ${skills}. `;
    if (companies) prompt += `Target companies: ${companies}. `;
    prompt += "Include Summary, Experience (bullet points), Education, Skills, and Projects. Output only JSON with keys resume_text and resume_json.";

    // Insert into textarea
    const ta = document.getElementById("rawPrompt");
    ta.value = prompt;
    promptModal.classList.add("hidden");
  });

  // Create resume action
  const createBtn = document.getElementById("createBtn");
  const status = document.getElementById("status");
  const targetSkillsInput = document.getElementById("targetSkills");

  // Charts placeholders
  let atsChart = null, timelineChart = null, keywordsChart = null;

  createBtn.addEventListener("click", async () => {
    const raw = document.getElementById("rawPrompt").value.trim();
    const targetSkills = document.getElementById("targetSkills").value.trim();
    if (!raw) { alert("Please enter resume info or use AI Prompt Generator"); return; }
    status.textContent = "Generating resume — contacting AI...";
    createBtn.disabled = true;

    try {
      const res = await fetch("builder/create", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({ resume_text: raw, target_skills: targetSkills })
      });
      const data = await res.json();
      createBtn.disabled = false;
      if (!res.ok) {
        status.textContent = data.error || "Error creating resume";
        return;
      }
      status.textContent = "Resume generated.";
      const analysis = data.analysis || {};
      showResults(analysis, data.id);
    } catch (err) {
      createBtn.disabled = false;
      status.textContent = "Error: " + err;
      console.error(err);
    }
  });

  function showResults(analysis, id) {
    document.getElementById("resultsPanel").classList.remove("hidden");

    // ATS donut
    const ats = analysis.ats_score ?? 0;
    document.getElementById("atsText").textContent = ats ? `ATS Score: ${ats}%` : "No target skills provided";
    const atsCtx = document.getElementById("atsChart").getContext("2d");
    if (atsChart) atsChart.destroy();
    atsChart = new Chart(atsCtx, {
      type: "doughnut",
      data: {
        labels: ["Matched", "Missing"],
        datasets: [{ data: [ats || 0, 100 - (ats || 0)], backgroundColor: ["#10B981","#EF4444"] }]
      }
    });

    // timeline chart (years)
    const timelineData = analysis.timeline || [];
    const tLabels = timelineData.map(x => (x.role || "role").substring(0,12));
    const tValues = timelineData.map(x => x.years || 0);
    const timelineCtx = document.getElementById("timelineChart").getContext("2d");
    if (timelineChart) timelineChart.destroy();
    timelineChart = new Chart(timelineCtx, {
      type: "bar",
      data: { labels: tLabels, datasets: [{ label: "Years", data: tValues, backgroundColor: "#3B82F6" }] },
      options: { scales: { y: { beginAtZero: true } } }
    });

    // keywords chart
    const kw = analysis.keyword_freq || [];
    const kwLabels = kw.map(x => x.word);
    const kwValues = kw.map(x => x.count);
    const keywordsCtx = document.getElementById("keywordsChart").getContext("2d");
    if (keywordsChart) keywordsChart.destroy();
    keywordsChart = new Chart(keywordsCtx, {
      type: "bar",
      data: { labels: kwLabels, datasets: [{ label: "Frequency", data: kwValues, backgroundColor: "#F59E0B" }] },
      options: { indexAxis: 'y' }
    });

    // skill chips
    const chips = document.getElementById("skillChips");
    chips.innerHTML = "";
    (analysis.matched_skills || []).forEach(s => {
      const sp = document.createElement("span"); sp.className = "inline-block bg-green-100 text-green-800 px-3 py-1 mr-2 rounded"; sp.textContent = s; chips.appendChild(sp);
    });
    (analysis.missing_skills || []).forEach(s => {
      const sp = document.createElement("span"); sp.className = "inline-block bg-red-100 text-red-800 px-3 py-1 mr-2 rounded"; sp.textContent = s; chips.appendChild(sp);
    });

    // resume text
    document.getElementById("resumeText").textContent = analysis.resume_text || JSON.stringify(analysis.resume_json, null, 2);

    // downloads (download saved JSON from server)
    const downloadJson = document.getElementById("downloadJson");
    const downloadTxt = document.getElementById("downloadTxt");
    downloadJson.href = `/builder/download/${id}`;
    downloadJson.download = `resume_${id}.json`;

    // create / link a TXT blob for download client-side
    const txtBlob = new Blob([analysis.resume_text || JSON.stringify(analysis.resume_json, null, 2)], {type:'text/plain'});
    const txtUrl = URL.createObjectURL(txtBlob);
    downloadTxt.href = txtUrl;
    downloadTxt.download = `resume_${id}.txt`;

    // status clear
    document.getElementById("status").textContent = "Done.";
  }
</script>
</body>
</html>
